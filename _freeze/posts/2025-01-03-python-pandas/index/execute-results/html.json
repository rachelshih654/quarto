{
  "hash": "605c7752d6029e4c6a35b81cf20b48e4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pandas 常用語法整理\"\ndescription: \"整理 Python Pandas 常用的資料處理語法，包含讀取資料、基本操作、資料清理等\"\ndate: \"2025-01-03\"\ncategories: [Python, Pandas, Data Analysis]\nimage: \"/assets/images/pandas.png\"\n---\n\n\n\n\n\n## 常用排行\n\n::: {#ec3224a9 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<style type=\"text/css\">\n#T_fd761_row0_col0, #T_fd761_row0_col1, #T_fd761_row0_col2, #T_fd761_row1_col0, #T_fd761_row1_col1, #T_fd761_row1_col2, #T_fd761_row2_col0, #T_fd761_row2_col1, #T_fd761_row2_col2, #T_fd761_row3_col0, #T_fd761_row3_col1, #T_fd761_row3_col2, #T_fd761_row4_col0, #T_fd761_row4_col1, #T_fd761_row4_col2, #T_fd761_row5_col0, #T_fd761_row5_col1, #T_fd761_row5_col2, #T_fd761_row6_col0, #T_fd761_row6_col1, #T_fd761_row6_col2, #T_fd761_row7_col0, #T_fd761_row7_col1, #T_fd761_row7_col2, #T_fd761_row8_col0, #T_fd761_row8_col1, #T_fd761_row8_col2, #T_fd761_row9_col0, #T_fd761_row9_col1, #T_fd761_row9_col2, #T_fd761_row10_col0, #T_fd761_row10_col1, #T_fd761_row10_col2, #T_fd761_row11_col0, #T_fd761_row11_col1, #T_fd761_row11_col2, #T_fd761_row12_col0, #T_fd761_row12_col1, #T_fd761_row12_col2, #T_fd761_row13_col0, #T_fd761_row13_col1, #T_fd761_row13_col2, #T_fd761_row14_col0, #T_fd761_row14_col1, #T_fd761_row14_col2 {\n  text-align: left;\n}\n</style>\n<table id=\"T_fd761\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_fd761_level0_col0\" class=\"col_heading level0 col0\" >Code</th>\n      <th id=\"T_fd761_level0_col1\" class=\"col_heading level0 col1\" >Description</th>\n      <th id=\"T_fd761_level0_col2\" class=\"col_heading level0 col2\" >Rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_fd761_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_fd761_row0_col0\" class=\"data row0 col0\" ><a href=\"#資料選取與過濾\">df['column_name']</a></td>\n      <td id=\"T_fd761_row0_col1\" class=\"data row0 col1\" >選取單一欄位</td>\n      <td id=\"T_fd761_row0_col2\" class=\"data row0 col2\" >⭐⭐⭐⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_fd761_row1_col0\" class=\"data row1 col0\" ><a href=\"#基本資料查看\">df.head()</a></td>\n      <td id=\"T_fd761_row1_col1\" class=\"data row1 col1\" >查看前幾筆資料</td>\n      <td id=\"T_fd761_row1_col2\" class=\"data row1 col2\" >⭐⭐⭐⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n      <td id=\"T_fd761_row2_col0\" class=\"data row2 col0\" ><a href=\"#讀取資料\">pd.read_csv()</a></td>\n      <td id=\"T_fd761_row2_col1\" class=\"data row2 col1\" >讀取 CSV 檔案</td>\n      <td id=\"T_fd761_row2_col2\" class=\"data row2 col2\" >⭐⭐⭐⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n      <td id=\"T_fd761_row3_col0\" class=\"data row3 col0\" ><a href=\"#基本資料查看\">df.info()</a></td>\n      <td id=\"T_fd761_row3_col1\" class=\"data row3 col1\" >查看資料基本資訊</td>\n      <td id=\"T_fd761_row3_col2\" class=\"data row3 col2\" >⭐⭐⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n      <td id=\"T_fd761_row4_col0\" class=\"data row4 col0\" ><a href=\"#基本資料查看\">df.describe()</a></td>\n      <td id=\"T_fd761_row4_col1\" class=\"data row4 col1\" >查看數值統計摘要</td>\n      <td id=\"T_fd761_row4_col2\" class=\"data row4 col2\" >⭐⭐⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n      <td id=\"T_fd761_row5_col0\" class=\"data row5 col0\" ><a href=\"#資料運算與統計\">df.groupby()</a></td>\n      <td id=\"T_fd761_row5_col1\" class=\"data row5 col1\" >群組運算</td>\n      <td id=\"T_fd761_row5_col2\" class=\"data row5 col2\" >⭐⭐⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n      <td id=\"T_fd761_row6_col0\" class=\"data row6 col0\" ><a href=\"#資料合併\">df.merge()</a></td>\n      <td id=\"T_fd761_row6_col1\" class=\"data row6 col1\" >合併資料表</td>\n      <td id=\"T_fd761_row6_col2\" class=\"data row6 col2\" >⭐⭐⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n      <td id=\"T_fd761_row7_col0\" class=\"data row7 col0\" ><a href=\"#資料處理與清理\">df.fillna()</a></td>\n      <td id=\"T_fd761_row7_col1\" class=\"data row7 col1\" >填補缺失值</td>\n      <td id=\"T_fd761_row7_col2\" class=\"data row7 col2\" >⭐⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n      <td id=\"T_fd761_row8_col0\" class=\"data row8 col0\" ><a href=\"#資料運算與統計\">df.sort_values()</a></td>\n      <td id=\"T_fd761_row8_col1\" class=\"data row8 col1\" >排序資料</td>\n      <td id=\"T_fd761_row8_col2\" class=\"data row8 col2\" >⭐⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n      <td id=\"T_fd761_row9_col0\" class=\"data row9 col0\" ><a href=\"#資料處理與清理\">df.drop_duplicates()</a></td>\n      <td id=\"T_fd761_row9_col1\" class=\"data row9 col1\" >刪除重複值</td>\n      <td id=\"T_fd761_row9_col2\" class=\"data row9 col2\" >⭐⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n      <td id=\"T_fd761_row10_col0\" class=\"data row10 col0\" ><a href=\"#資料匯出\">df.to_csv()</a></td>\n      <td id=\"T_fd761_row10_col1\" class=\"data row10 col1\" >匯出 CSV</td>\n      <td id=\"T_fd761_row10_col2\" class=\"data row10 col2\" >⭐⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n      <td id=\"T_fd761_row11_col0\" class=\"data row11 col0\" ><a href=\"#樞紐表\">pd.pivot_table()</a></td>\n      <td id=\"T_fd761_row11_col1\" class=\"data row11 col1\" >建立樞紐分析表</td>\n      <td id=\"T_fd761_row11_col2\" class=\"data row11 col2\" >⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n      <td id=\"T_fd761_row12_col0\" class=\"data row12 col0\" ><a href=\"#資料處理與清理\">df.astype()</a></td>\n      <td id=\"T_fd761_row12_col1\" class=\"data row12 col1\" >轉換資料型態</td>\n      <td id=\"T_fd761_row12_col2\" class=\"data row12 col2\" >⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n      <td id=\"T_fd761_row13_col0\" class=\"data row13 col0\" ><a href=\"#時間序列處理\">df.resample()</a></td>\n      <td id=\"T_fd761_row13_col1\" class=\"data row13 col1\" >重新取樣時間序列</td>\n      <td id=\"T_fd761_row13_col2\" class=\"data row13 col2\" >⭐⭐</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd761_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n      <td id=\"T_fd761_row14_col0\" class=\"data row14 col0\" ><a href=\"#字串處理\">df.str.contains()</a></td>\n      <td id=\"T_fd761_row14_col1\" class=\"data row14 col1\" >字串包含判斷</td>\n      <td id=\"T_fd761_row14_col2\" class=\"data row14 col2\" >⭐⭐</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n## 讀取資料\n\n```python\nimport pandas as pd\n\n# 讀取 CSV 檔案\ndf = pd.read_csv('data.csv', encoding='utf-8', sep=',', header=0, index_col=None, usecols=None, nrows=None)\n'''\n常用參數：\n- encoding: 'utf-8', 'big5' 等編碼方式\n- sep: 分隔符號，預設為 ','\n- header: 標題列位置，預設為 0\n- index_col: 指定索引欄位\n- usecols: 指定要讀取的欄位\n- nrows: 指定要讀取的列數\n'''\n\n# 讀取 Excel 檔案\ndf = pd.read_excel('data.xlsx')\n'''\n常用參數：\n- sheet_name: 工作表名稱或索引\n- header: 標題列位置\n- usecols: 指定要讀取的欄位\n- skiprows: 跳過指定列數\n'''\n\n# 讀取 JSON 檔案\ndf = pd.read_json('data.json')\n'''\n常用參數：\n- orient: 資料格式，如 'records', 'split', 'index'\n- lines: 是否每行一筆資料\n- encoding: 編碼方式\n'''\n```\n\n\n\n## 基本資料查看\n\n```python\n# 查看前幾筆資料\ndf.head()  # n: 要顯示的筆數，預設為 5\n\n# 查看資料基本資訊\ndf.info()\n'''\n常用參數：\n- verbose: 是否顯示完整資訊\n- show_counts: 是否顯示非空值計數\n- memory_usage: 是否顯示記憶體使用量\n'''\n\n# 查看數值欄位的統計摘要\ndf.describe()\n'''\n常用參數：\n- include: 要包含的資料類型，如 ['object'], [np.number]\n- percentiles: 要計算的百分位數\n'''\n```\n\n## 資料選取與過濾\n\n```python\n# 選取單一欄位\ndf['column_name']\n\n# 選取多個欄位\ndf[['column1', 'column2']]\n\n# 條件過濾\ndf[df['age'] > 25]\n\n# 多重條件過濾\ndf[(df['age'] > 25) & (df['salary'] > 50000)]\n\n# 使用 iloc 依照位置選取\ndf.iloc[0:5, 0:2]  # 選取前5列，前2欄\n\n# 使用 loc 依照標籤選取\ndf.loc['row_label', 'column_label']\n'''\nloc 常用用法：\n- df.loc[row_indexer, column_indexer]\n- df.loc['row_label']  # 選取單一列\n- df.loc[:, 'column_label']  # 選取單一欄\n- df.loc['start':'end']  # 選取範圍\n'''\n```\n\n## 資料處理與清理\n\n```python\n# 處理缺失值\ndf.isna()  # 檢查缺失值\ndf.fillna(0)  # 填補缺失值\ndf.dropna()  # 刪除含有缺失值的列\n'''\n常用參數：\n- axis: 0 刪除列, 1 刪除欄\n- how: 'any' 任一缺失則刪除, 'all' 全部缺失才刪除\n- subset: 指定要檢查的欄位\n'''\n\n# 重複值處理\ndf.duplicated()  # 檢查重複值\ndf.drop_duplicates()  # 刪除重複列\n\n# 重新命名欄位\ndf.rename(columns={'old_name': 'new_name'})\n\n# 資料型態轉換\ndf['column'].astype('int64')\n'''\n常用型態：\n- int64, float64: 數值型態\n- str, object: 字串型態\n- datetime64: 時間型態\n- category: 類別型態\n'''\n```\n\n## 資料運算與統計\n\n```python\n# 基本統計\ndf['column'].mean()  # 平均值\ndf['column'].median()  # 中位數\ndf['column'].mode()  # 眾數\ndf['column'].std()  # 標準差\n\n# 群組運算\ndf.groupby('category')['value'].mean()\n'''\n常用參數：\n- by: 分組依據，可使用多個欄位\n- as_index: 是否將分組欄位作為索引\n- observed: 是否只使用觀察到的類別\n'''\n\n# 排序\ndf.sort_values('column', ascending=False)\n'''\n常用參數：\n- by: 排序依據，可使用多個欄位\n- ascending: True 升序, False 降序\n- na_position: 'first' 或 'last'\n- inplace: 是否直接修改原資料\n'''\n```\n\n## 資料合併\n\n```python\n# 合併兩個 DataFrame\npd.concat([df1, df2])  # 垂直合併\npd.concat([df1, df2], axis=1)  # 水平合併\n\n# 使用 merge 合併\npd.merge(df1, df2, on='key_column')\n'''\n常用參數：\n- how: 'inner', 'outer', 'left', 'right' 合併方式\n- on: 合併依據的欄位\n- left_on/right_on: 左右資料表合併依據的欄位\n- suffixes: 重複欄位的後綴\n'''\n\n# 垂直合併\npd.concat([df1, df2])\n'''\n常用參數：\n- axis: 0 垂直合併, 1 水平合併\n- ignore_index: 是否重新產生索引\n- join: 'inner' 或 'outer' 合併方式\n'''\n```\n\n## 資料匯出\n\n```python\n# 匯出成不同格式\ndf.to_csv('output.csv', index=False)\ndf.to_excel('output.xlsx')\ndf.to_json('output.json')\n```\n\n## 樞紐表\n\n```python       \n# 樞紐表\npd.pivot_table(df, \n    values='value', \n    index='category1',\n    columns='category2', \n    aggfunc='mean'\n)\n'''\n常用參數：\n- values: 要計算的欄位\n- index: 列索引\n- columns: 欄索引\n- aggfunc: 計算方式，如 'mean', 'sum', 'count'\n- fill_value: 缺失值填補值\n- margins: 是否顯示總計\n'''\n```\n\n## 時間序列處理\n\n```python\n# 時間序列處理\ndf['date'] = pd.to_datetime(df['date'])\n'''\n常用參數：\n- format: 時間格式，如 '%Y-%m-%d'\n- errors: 'raise', 'coerce', 'ignore'\n'''\n\ndf.set_index('date', inplace=True)\ndf.resample('M').mean()\n'''\n常用參數：\n- rule: 重新取樣頻率\n  - 'D': 日\n  - 'W': 週\n  - 'M': 月\n  - 'Q': 季\n  - 'Y': 年\n- on: 依據的時間欄位\n- closed: 區間閉合方式\n'''\n```\n\n## 字串處理\n\n```python\n# 字串處理\ndf['text'].str.contains('pattern')\n'''\n常用參數：\n- pat: 要搜尋的模式\n- case: 是否區分大小寫\n- regex: 是否使用正則表達式\n- na: 缺失值的處理方式\n'''\n\ndf['text'].str.replace('old', 'new')\n'''\n常用參數：\n- pat: 要替換的模式\n- repl: 替換後的字串\n- regex: 是否使用正則表達式\n- n: 替換次數\n'''\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}